import numpy as np

def f1(x: np.ndarray) -> np.ndarray:
    return np.sin(x[0])

#np.multiply(np.multiply(np.add(np.add(np.add(np.multiply(7.885793211722174, -7.8931273901629595), np.multiply(x[0], x[1])), np.subtract(np.multiply(x[0], x[1]), np.subtract(-9.996265568395703, -3.5368479505381583))), np.multiply(np.multiply(5.517038333390751, x[0]), np.reciprocal(np.divide(1.5827088050437421, x[2])))), np.add(np.subtract(np.multiply(x[1], 4.978572892293439), np.divide(np.multiply(7.885793211722174, x[2]), np.add(0.05336626761377872, -1.6943696697781867))), np.multiply(np.subtract(1.7392443126434909, -7.8931273901629595), x[0]))), np.multiply(np.add(np.multiply(np.multiply(x[1], np.cosh(-3.6182647063354416)), np.reciprocal(np.divide(-3.6182647063354416, x[2]))), np.subtract(np.multiply(x[0], np.multiply(2.6184311110488068, x[2])), np.multiply(np.subtract(5.517038333390751, -9.996265568395703), np.subtract(-9.996265568395703, 6.355714362732318)))), np.divide(np.add(np.add(np.multiply(8.548291176143636, -9.626684954722101), np.multiply(x[0], x[1])), np.absolute(np.multiply(-9.996265568395703, x[0]))), 3.340770779277813)))
def f2(x: np.ndarray) -> np.ndarray:
    return (((((-62.24357039260542 + (x[0] * x[1])) + ((x[0] * x[1]) + 6.459417617857545)) + ((5.517038333390751 * x[0]) * np.reciprocal((1.5827088050437421 / x[2])))) * (((x[1] * 4.978572892293439) - ((7.885793211722174 * x[2]) / -1.641003402164408)) + (9.63237170280645 * x[0]))) * ((((x[1] * 18.649830776786864) * np.reciprocal((-3.6182647063354416 / x[2]))) + ((x[0] * (2.6184311110488068 * x[2])) +253.6732340675021)) * (((-82.29170605396563 + (x[0] * x[1])) + np.absolute((-9.996265568395703 * x[0]))) / 3.340770779277813)))

#np.add(np.multiply(np.arctan(np.add(np.divide(np.subtract(x[2], -2.065621497047198), 3.7609747965545135), 14.11482758558892)), 2.6622227984463516), np.negative(np.add(np.add(np.multiply(np.square(x[0]), -2.0), np.divide(3.503326125821749, np.reciprocal(x[2]))), np.multiply(x[1], np.square(x[1])))))
def f3(x: np.ndarray) -> np.ndarray:
    return ((np.arctan((((x[2] - -2.065621497047198) / 3.7609747965545135) + 14.11482758558892)) * 2.6622227984463516) + -((((np.square(x[0]) * -2.0) + (3.503326125821749 / np.reciprocal(x[2]))) + (x[1] * np.square(x[1])))))

# np.add(np.arctan(np.add(np.cos(np.add(x[0], -2.643791764058358)), np.absolute(np.add(x[0], -3.1193709482751033)))), np.add(np.add(np.add(np.cos(x[1]), np.cos(x[1])), np.add(np.cos(x[1]), 2.1089875923126202)), np.add(np.add(np.cos(x[1]), np.cos(x[1])), np.add(np.cos(x[1]), np.cos(x[1])))))
def f4(x: np.ndarray) -> np.ndarray: 
    return (np.arctan((np.cos((x[0] + -2.643791764058358)) + np.absolute((x[0] + -3.1193709482751033)))) + (((np.cos(x[1]) + np.cos(x[1])) + (np.cos(x[1]) + 2.1089875923126202)) + ((np.cos(x[1]) + np.cos(x[1])) + (np.cos(x[1]) + np.cos(x[1])))))

#np.multiply(4.356153822762008e-11, np.divide(np.add(0.18873497848879503, np.add(-4.311704549797579, np.power(np.sqrt(x[0]), x[1]))), np.divide(-4.311704549797579, np.add(3.8872132896946994, np.power(np.sqrt(x[0]), x[1])))))
def f5(x: np.ndarray) -> np.ndarray: 
    return (4.356153822762008e-11 * ((0.18873497848879503 + (-4.311704549797579 + np.power(np.sqrt(x[0]), x[1]))) / (-4.311704549797579 / (3.8872132896946994 + np.power(np.sqrt(x[0]), x[1])))))

#np.add(np.divide(np.divide(9.570811396234019, np.divide(3.2990756682061715, x[1])), 1.7120363063134838), np.multiply(np.divide(np.multiply(x[0], -0.342886656605085), 0.9853790256442974), 1.9959027865438197))
def f6(x: np.ndarray) -> np.ndarray: 
    return (((9.570811396234019 / (3.2990756682061715 / x[1])) / 1.7120363063134838) + (((x[0] * -0.342886656605085) / 0.9853790256442974) * 1.9959027865438197))

#np.absolute(np.power(np.subtract(np.add(np.cos(np.subtract(np.divide(np.subtract(np.multiply(x[1], -8.10607796497652), np.multiply(-7.924875171827823, x[0])), np.power(np.divide(np.divide(5.861664595147214, x[0]), x[0]), np.multiply(x[0], x[1]))), np.subtract(np.divide(np.subtract(np.multiply(x[1], -6.874031740622093), np.multiply(-8.10607796497652, x[0])), -8.10607796497652), np.subtract(np.multiply(x[1], 5.861664595147214), np.multiply(5.861664595147214, x[0]))))), np.add(np.cos(np.multiply(4.622079743092854, x[0])), np.cos(np.subtract(np.divide(np.cos(np.cosh(x[1])), np.add(0.5202196461897793, np.divide(x[0], x[1]))), np.divide(np.cos(np.multiply(5.861664595147214, x[0])), np.add(-5.714719899933344, np.multiply(x[0], x[1]))))))), np.add(-6.874031740622093, np.multiply(x[0], x[1]))), np.multiply(np.multiply(x[0], x[1]), np.sinh(np.cos(np.tanh(np.arctan(np.arctan(np.subtract(np.multiply(x[1], -8.10607796497652), np.multiply(-8.10607796497652, x[0]))))))))))
def f7(x: np.ndarray) -> np.ndarray:
    return np.absolute(np.power(((np.cos(((((x[1] * -8.10607796497652) - (-7.924875171827823 * x[0])) / np.power(((5.861664595147214 / x[0]) / x[0]), (x[0] * x[1]))) - ((((x[1] * -6.874031740622093) - (-8.10607796497652 * x[0])) / -8.10607796497652) - ((x[1] * 5.861664595147214) - (5.861664595147214 * x[0]))))) + (np.cos((4.622079743092854 * x[0])) + np.cos(((np.cos(np.cosh(x[1])) / (0.5202196461897793 + (x[0] / x[1]))) - (np.cos((5.861664595147214 * x[0])) / (-5.714719899933344 + (x[0] * x[1]))))))) - (-6.874031740622093 + (x[0] * x[1]))), ((x[0] * x[1]) * np.sinh(np.cos(np.tanh(np.arctan(np.arctan(((x[1] * -8.10607796497652) - (-8.10607796497652 * x[0]))))))))))

#np.multiply(np.add(30.99548272509775, np.subtract(np.divide(np.cbrt(np.multiply(-9.904671175631725, np.add(-26838.621774182568, np.multiply(np.multiply(np.sinh(x[5]), np.sinh(x[5])), 60.65029204679513)))), -6.631962662801564), -177.8377900415322)), np.add(np.divide(np.add(np.add(np.subtract(np.multiply(4.138882735095572, np.multiply(np.sinh(x[5]), np.sinh(x[5]))), np.rint(np.divide(-0.18218597477598222, np.add(np.power(9.988316543481012, x[4]), np.power(9.988316543481012, x[4]))))), -93940.13482726304), x[2]), np.divide(-428859.8490155226, x[3])), np.add(np.subtract(np.subtract(x[4], x[5]), np.add(np.divide(np.cbrt(np.multiply(-9.904671175631725, np.add(np.power(9.988316543481012, x[4]), np.power(9.988316543481012, x[4])))), -6.711696173319062), np.multiply(np.power(1.0555313791157493e+159, np.multiply(-30.888759063631458, np.add(np.power(9.988316543481012, x[4]), np.power(9.988316543481012, x[4])))), np.multiply(-0.9568611800814073, np.add(-8.249003638386203, np.divide(np.divide(x[1], -8.249003638386203), np.subtract(x[0], -6.631962662801564))))))), np.sinh(x[5]))))
def f8(x: np.ndarray) -> np.ndarray: 
    return ((30.99548272509775 + ((np.cbrt((-9.904671175631725 * (-26838.621774182568 + ((np.sinh(x[5]) * np.sinh(x[5])) * 60.65029204679513)))) / -6.631962662801564) - -177.8377900415322)) * ((((((4.138882735095572 * (np.sinh(x[5]) * np.sinh(x[5]))) - np.rint((-0.18218597477598222 / (np.power(9.988316543481012, x[4]) + np.power(9.988316543481012, x[4]))))) + -93940.13482726304) + x[2]) / (-428859.8490155226 / x[3])) + (((x[4] - x[5]) - ((np.cbrt((-9.904671175631725 * (np.power(9.988316543481012, x[4]) + np.power(9.988316543481012, x[4])))) / -6.711696173319062) + (np.power(1.0555313791157493e+159, (-30.888759063631458 * (np.power(9.988316543481012, x[4]) + np.power(9.988316543481012, x[4])))) * (-0.9568611800814073 * (-8.249003638386203 + ((x[1] / -8.249003638386203) / (x[0] - -6.631962662801564))))))) + np.sinh(x[5]))))
